@model Sheessential_Sales_Finance.Models.InvoiceListViewModel
@using Sheessential_Sales_Finance.Models
@{
    ViewData["Title"] = "Invoices";
}

<div class="p-6 space-y-6">

    <!-- ===== Summary Cards ===== -->
    <div class="grid grid-cols-1 sm:grid-cols-3 gap-4">
        <div class="bg-white rounded-2xl shadow-sm p-5 flex flex-col items-center text-center border border-gray-100">
            <i class="fa-solid fa-money-bill-wave text-gray-400 text-3xl mb-2"></i>
            <h2 class="text-xl font-semibold text-gray-800">₱@Model.OverdueAmount.ToString("N2")</h2>
            <p class="text-sm text-gray-500">Overdue Amount</p>
        </div>

        <div class="bg-white rounded-2xl shadow-sm p-5 flex flex-col items-center text-center border border-gray-100">
            <i class="fa-solid fa-wallet text-gray-400 text-3xl mb-2"></i>
            <h2 class="text-xl font-semibold text-gray-800">₱@Model.OpenAmount.ToString("N2")</h2>
            <p class="text-sm text-gray-500">Open Amount</p>
        </div>

        <div class="bg-white rounded-2xl shadow-sm p-5 flex flex-col items-center text-center border border-gray-100">
            <i class="fa-solid fa-receipt text-gray-400 text-3xl mb-2"></i>
            <h2 class="text-xl font-semibold text-gray-800">₱@Model.DraftedAmount.ToString("N2")</h2>
            <p class="text-sm text-gray-500">Drafted Amount</p>
        </div>
    </div>

    <!-- ===== Invoice Section ===== -->
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">

        <!-- ===== Left Column (Invoice List) ===== -->
        <div class="col-span-2 bg-white rounded-2xl shadow-sm border border-gray-100 p-5">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-lg font-semibold text-gray-700">All Invoices</h2>

                <div class="flex items-center gap-3">
                    <!-- New Invoice Button -->
                    <a class="bg-pink-500 hover:bg-pink-600 text-white text-sm font-medium px-4 py-2 rounded-xl shadow-md transition cursor-pointer"
                       data-modal-target="newInvoiceModal">
                        <i class="fa-solid fa-plus mr-1"></i> New Invoice
                    </a>

                    <!-- Search Input -->
                    <div class="relative">
                        <input type="text"
                               id="searchBox"
                               placeholder="Search here..."
                               autocomplete="off"
                               class="pl-10 pr-4 py-2.5 w-56 rounded-xl bg-gray-50 focus:bg-white focus:ring-2 focus:ring-pink-300 outline-none text-gray-600 text-sm transition" />
                        <i class="fa-solid fa-magnifying-glass absolute left-3 top-3 text-gray-400"></i>

                        <!-- Suggestions -->
                        <div id="searchSuggestions" 
                             class="absolute left-0 mt-1 w-full bg-white border border-gray-200 rounded-xl shadow-lg hidden z-50 overflow-hidden"></div> 
                    </div>
                </div>
            </div>

            <!-- ===== Invoice Table ===== -->
            <div class="overflow-x-auto">
                <table id="invoiceTable" class="min-w-full text-sm text-left border-t border-gray-100">
                    <thead class="bg-gray-50 text-gray-600 font-medium">
                        <tr>
                            <th class="py-3 px-4">Status</th>
                            <th class="py-3 px-4">Invoice #</th>
                            <th class="py-3 px-4">Due Date</th>
                            <th class="py-3 px-4">Customer</th>
                            <th class="py-3 px-4 text-right">Amount</th>
                            <th class="py-3 px-4 text-center">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var invoice in Model.Invoices)
                        {
                            var statusColor = invoice.Status switch
                            {
                                InvoiceStatus.Paid => "bg-green-100 text-green-600",
                                InvoiceStatus.Unpaid => "bg-pink-100 text-pink-600",
                                InvoiceStatus.Overdue => "bg-yellow-100 text-yellow-600",
                                InvoiceStatus.Partial => "bg-blue-100 text-blue-600",
                                InvoiceStatus.Draft => "bg-gray-100 text-gray-600",
                                InvoiceStatus.Cancelled => "bg-red-100 text-red-600",
                                _ => "bg-gray-100 text-gray-600"
                            };

                            <tr class="border-t transition cursor-pointer hover:bg-pink-50"
                                data-id="@invoice.Id"
                                data-invoice-number="@invoice.InvoiceNumber.ToLower()"
                                data-billed-to="@invoice.BilledTo.ToLower()"
                                data-due-date="@((invoice.DueDate?.ToString("dd MMM yyyy").ToLower()) ?? "")"
                                onclick="selectInvoice('@invoice.Id')">
                                <td class="py-3 px-4">
                                    <span class="@statusColor text-xs px-3 py-1 rounded-full font-medium">@invoice.Status</span>
                                </td>
                                <td class="py-3 px-4 font-medium text-gray-700">@invoice.InvoiceNumber</td>
                                <td class="py-3 px-4 text-gray-600">@((invoice.DueDate?.ToString("dd MMM yyyy")) ?? "—")</td>
                                <td class="py-3 px-4 text-gray-700">@invoice.BilledTo</td>
                                <td class="py-3 px-4 text-right font-semibold text-gray-800">₱@invoice.Total.ToString("N2")</td>
                                <td class="py-3 px-4 text-center space-x-2">
                                    <button class="text-blue-500 hover:text-blue-700"
                                            onclick="openUpdateModal('@invoice.Id', '@invoice.InvoiceNumber', '@invoice.Status')">
                                        <i class="fa-solid fa-pen-to-square"></i>
                                    </button>
                                    <button class="text-red-500 hover:text-red-700"
                                            onclick="openDeleteModal('@invoice.Id', '@invoice.InvoiceNumber')">
                                        <i class="fa-solid fa-trash"></i>
                                    </button>
                                </td>

                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>


        <!-- ===== Right Column (Invoice Detail Preview) ===== -->
        <div id="invoiceDetailContainer" class="bg-white rounded-2xl shadow-sm border border-gray-100 p-5 text-sm text-gray-700">
            <p class="text-gray-500 text-center py-10">Select an invoice to view details</p>
        </div>
    </div> 
 </div>


@* <div id="newInvoiceModal" class="fixed inset-0 bg-black bg-opacity-30 hidden items-center justify-center z-50"> *@
@*     <div class="bg-[#fffafc] rounded-3xl shadow-lg w-[800px] max-h-[90vh] overflow-y-auto p-6 relative"> *@
@*         <button type="button" class="absolute top-4 right-4 text-gray-500 hover:text-gray-800 text-xl font-bold" data-modal-close> *@
@*             &times; *@
@*         </button> *@

@*         <h1 class="text-2xl font-semibold mb-2">New Invoice</h1> *@

@*         <!-- BILLING INFORMATION --> *@
@*         <h2 class="text-lg font-bold mt-4 mb-1">BILLING INFORMATION</h2> *@

@*         <div class="mb-2"> *@
@*             <h3 class="text-base font-bold mb-2">Customer</h3> *@

@*             <!-- Customer Search --> *@
@*             <div class="relative mb-3"> *@
@*                 <input id="customerSearchInput" *@
@*                        type="text" *@
@*                        class="w-full border border-gray-300 rounded-xl p-2 text-sm pl-9 focus:ring-1 focus:ring-pink-400" *@
@*                        placeholder="Search customer..." *@
@*                        autocomplete="off" /> *@
@*                 <i class="fa-solid fa-search absolute left-3 top-2.5 text-gray-400 text-sm"></i> *@

@*                 <!-- Customer Suggestions --> *@
@*                 <div id="customerSuggestions" *@
@*                      class="absolute mt-1 w-full bg-white border border-gray-200 rounded-xl shadow-md hidden max-h-48 overflow-y-auto z-10"></div> *@
@*             </div> *@

@*             <!-- Customer Details --> *@
@*             <textarea id="customerDetails" *@
@*                       class="w-full border border-gray-300 rounded-xl p-2 text-sm h-20 resize-none" *@
@*                       placeholder="Customer details will appear here..."></textarea> *@

@*             <input type="hidden" id="selectedCustomerId" /> *@
@*         </div> *@

@*         <div class="grid grid-cols-2 gap-4 mt-4"> *@
@*             <div> *@
@*                 <label class="text-sm font-medium">Invoice Date</label> *@
@*                 <input type="date" class="w-full border border-gray-300 rounded-xl p-2 text-sm" /> *@
@*             </div> *@
@*             <div> *@
@*                 <label class="text-sm font-medium">Due Date</label> *@
@*                 <input type="date" class="w-full border border-gray-300 rounded-xl p-2 text-sm" /> *@
@*             </div> *@
@*         </div> *@

@*         <div class="mt-4"> *@
@*             <label class="text-sm font-medium">Invoice Number</label> *@
@*             <input type="text" class="w-full border border-gray-300 rounded-xl p-2 text-sm" placeholder="INV - 00001" /> *@
@*         </div> *@

@* <div id="newInvoiceModal" class="fixed inset-0 bg-black bg-opacity-30 hidden items-center justify-center z-50"> *@
@*     <div class="bg-[#fffafc] rounded-3xl shadow-lg w-[800px] max-h-[90vh] overflow-y-auto p-6 relative"> *@
@*         <button type="button" class="absolute top-4 right-4 text-gray-500 hover:text-gray-800 text-xl font-bold" data-modal-close> *@
@*             &times; *@
@*         </button> *@

@*         <!-- Header with invoice number --> *@
@*         <div class="flex justify-between items-center mb-4"> *@
@*             <h1 class="text-2xl font-semibold">New Invoice</h1> *@
@*             <span id="autoInvoiceNumber" class="text-sm font-medium text-gray-600 bg-pink-50 px-3 py-1 rounded-lg border border-pink-200"> *@
@*                 INV-00001 *@
@*             </span> *@
@*         </div> *@

@*         <!-- BILLING INFORMATION --> *@
@*         <h2 class="text-lg font-bold mt-4 mb-1">BILLING INFORMATION</h2> *@

@*         <!-- Customer Section --> *@
@*         <div class="mb-2"> *@
@*             <h3 class="text-base font-bold mb-2">Customer</h3> *@

@*             <!-- Customer Search --> *@
@*             <div class="relative mb-3"> *@
@*                 <input id="customerSearchInput" *@
@*                        type="text" *@
@*                        class="w-full border border-gray-300 rounded-xl p-2 text-sm pl-9 focus:ring-1 focus:ring-pink-400" *@
@*                        placeholder="Search customer..." *@
@*                        autocomplete="off" /> *@
@*                 <i class="fa-solid fa-search absolute left-3 top-2.5 text-gray-400 text-sm"></i> *@

@*                 <!-- Customer Suggestions --> *@
@*                 <div id="customerSuggestions" *@
@*                      class="absolute mt-1 w-full bg-white border border-gray-200 rounded-xl shadow-md hidden max-h-48 overflow-y-auto z-10"></div> *@
@*             </div> *@

@*             <!-- Customer Details --> *@
@*             <textarea id="customerDetails" *@
@*                       class="w-full border border-gray-300 rounded-xl p-2 text-sm h-20 resize-none" *@
@*                       placeholder="Customer details will appear here..."></textarea> *@

@*             <input type="hidden" id="selectedCustomerId" /> *@
@*         </div> *@

@*         <div class="grid grid-cols-2 gap-4 mt-4"> *@
@*             <div> *@
@*                 <label class="text-sm font-medium">Invoice Date</label> *@
@*                 <input id="invoiceDate" type="date" class="w-full border border-gray-300 rounded-xl p-2 text-sm" /> *@
@*             </div> *@
@*             <div> *@
@*                 <label class="text-sm font-medium">Due Date</label> *@
@*                 <input id="dueDate" type="date" class="w-full border border-gray-300 rounded-xl p-2 text-sm" /> *@
@*             </div> *@
@*         </div> *@

@*         <!-- PRODUCT DETAILS --> *@
@*         <h2 class="text-lg font-bold mt-6 mb-2">PRODUCT DETAILS</h2> *@

@*         <div class="border border-gray-200 rounded-xl bg-white max-h-60 overflow-y-auto"> *@
@*             <table class="w-full border-collapse text-sm"> *@
@*                 <thead class="bg-pink-50 text-gray-600 sticky top-0"> *@
@*                     <tr> *@
@*                         <th class="text-left p-2">Item</th> *@
@*                         <th class="text-left p-2">Description</th> *@
@*                         <th class="text-left p-2">Quantity</th> *@
@*                         <th class="text-left p-2">Price</th> *@
@*                         <th class="text-left p-2 text-right">Amount</th> *@
@*                     </tr> *@
@*                 </thead> *@
@*                 <tbody id="productTableBody"> *@
@*                     @foreach (var product in Model.AvailableProducts) *@
@*                     { *@
@*                         <tr id="product-@product.Id" class="hover:bg-pink-50 transition"> *@
@*                             <td class="p-2">@product.Item</td> *@
@*                             <td class="p-2">@product.Category</td> *@
@*                             <td class="p-2"> *@
@*                                 <input type="number" *@
@*                                        min="0" *@
@*                                        value="0" *@
@*                                        class="qtyInput w-16 border border-gray-300 rounded-lg p-1 text-center" *@
@*                                        data-price="@product.SRP" /> *@
@*                             </td> *@
@*                             <td class="p-2">₱@product.SRP.ToString("N2")</td> *@
@*                             <td class="p-2 text-right font-medium text-gray-800 amountCell">₱0.00</td> *@
@*                         </tr> *@
@*                     } *@
@*                 </tbody> *@
@*             </table> *@
@*         </div> *@

@*         <div class="text-sm space-y-1 text-right mt-4"> *@
@*             <p><span class="text-gray-500">Subtotal</span> <span id="invoiceSubtotal" class="font-medium">₱0.00</span></p> *@
@*             <p><span class="text-gray-500">Discount</span> <span class="font-medium">₱0.00</span></p> *@
@*             <p class="font-bold text-gray-800">TOTAL <span id="invoiceTotal">₱0.00</span></p> *@
@*         </div> *@

@*         <!-- NOTES --> *@
@*         <h2 class="text-lg font-bold mt-6 mb-2">NOTES</h2> *@
@*         <textarea class="w-full border border-gray-300 rounded-xl p-2 text-sm h-20 resize-none" placeholder="Enter notes..."></textarea> *@

@*         <div class="flex justify-between mt-6"> *@
@*             <button type="button" data-modal-close class="bg-green-100 hover:bg-green-200 text-green-700 font-medium px-6 py-2 rounded-xl">Cancel</button> *@
@*             <button type="submit" class="bg-green-400 hover:bg-green-500 text-white font-medium px-6 py-2 rounded-xl shadow-md">Save</button> *@
@*         </div> *@
@*     </div> *@
@* </div> *@

<div id="newInvoiceModal" class="fixed inset-0 bg-black bg-opacity-30 hidden items-center justify-center z-50">
    <div class="bg-[#fffafc] rounded-3xl shadow-lg w-[800px] max-h-[90vh] overflow-y-auto p-6 relative">

        <button type="button"
                class="absolute top-4 right-4 text-gray-500 hover:text-gray-800 text-xl font-bold"
                data-modal-close>
            &times;
        </button>

        <form asp-controller="Sales_Finance" asp-action="CreateInvoice" method="post" id="createInvoiceForm">
            <!-- Header with invoice number -->
            <div class="flex justify-between items-center mb-4">
                <h1 class="text-2xl font-semibold">New Invoice</h1>
                <span id="autoInvoiceNumber"
                      class="text-sm font-medium text-gray-600 bg-pink-50 px-3 py-1 rounded-lg border border-pink-200">
                    INV-00001
                </span>
                <!-- Hidden auto-generated InvoiceNumber -->
                <input type="hidden" id="InvoiceNumber" name="InvoiceNumber"  value="INVosf"/>
            </div>

            <!-- BILLING INFORMATION -->
            <h2 class="text-lg font-bold mt-4 mb-1">BILLING INFORMATION</h2>

            <!-- Customer Section -->
            <div class="mb-2">
                <h3 class="text-base font-bold mb-2">Customer</h3>

                <!-- Customer Search -->
                <div class="relative mb-3">
                    <input id="customerSearchInput"
                           type="text"
                           class="w-full border border-gray-300 rounded-xl p-2 text-sm pl-9 focus:ring-1 focus:ring-pink-400"
                           placeholder="Search customer..."
                           autocomplete="off" />
                    <i class="fa-solid fa-search absolute left-3 top-2.5 text-gray-400 text-sm"></i>

                    <!-- Customer Suggestions -->
                    <div id="customerSuggestions"
                         class="absolute mt-1 w-full bg-white border border-gray-200 rounded-xl shadow-md hidden max-h-48 overflow-y-auto z-10"></div>
                </div>

                <!-- Customer Details -->
                <textarea id="customerDetails"
                          class="w-full border border-gray-300 rounded-xl p-2 text-sm h-20 resize-none"
                          placeholder="Customer details will appear here..." readonly></textarea>

                <!-- BilledTo (ObjectId reference to customer) -->
                <input type="hidden" name="BilledTo" id="selectedCustomerId" required />
            </div>

            <!-- Dates -->
            <div class="grid grid-cols-2 gap-4 mt-4">
                <div>
                    <label class="text-sm font-medium">Invoice Date</label>
                    <input id="invoiceDate"
                           name="IssuedAt"
                           type="date"
                           class="w-full border border-gray-300 rounded-xl p-2 text-sm"
                           required />
                </div>
                <div>
                    <label class="text-sm font-medium">Due Date</label>
                    <input id="dueDate"
                           name="DueDate"
                           type="date"
                           class="w-full border border-gray-300 rounded-xl p-2 text-sm" />
                </div>
            </div>

            <!-- PRODUCT DETAILS -->
            <h2 class="text-lg font-bold mt-6 mb-2">PRODUCT DETAILS</h2>

            <div class="border border-gray-200 rounded-xl bg-white max-h-60 overflow-y-auto">
                <table class="w-full border-collapse text-sm">
                    <thead class="bg-pink-50 text-gray-600 sticky top-0">
                        <tr>
                            <th class="text-left p-2">Item</th>
                            <th class="text-left p-2">Description</th>
                            <th class="text-left p-2">Quantity</th>
                            <th class="text-left p-2">Price</th>
                            <th class="text-left p-2 text-right">Amount</th>
                        </tr>
                    </thead>
                    <tbody id="productTableBody">
                        @for (int i = 0; i < Model.AvailableProducts.Count; i++)
                        {
                            var product = Model.AvailableProducts[i];
                            <tr id="product-@product.Id" class="hover:bg-pink-50 transition">
                                <td class="p-2">@product.Item</td>
                                <td class="p-2">@product.Category</td>
                                <td class="p-2">
                                    <input type="number"
                                           name="Items[@i].Quantity"
                                           min="0"
                                           value="0"
                                           class="qtyInput w-16 border border-gray-300 rounded-lg p-1 text-center"
                                           data-price="@product.SRP" />
                                    <input type="hidden" name="Items[@i].SalePrice" value="@product.SRP" />
                                    <input type="hidden" name="Items[@i].ProductId" value="@product.Id" />
                                    <input type="hidden" name="Items[@i].SaleTax" value="0" />
                                    <input type="hidden" name="Items[@i].SaleDiscounts" value="0" />
                                </td>
                                <td class="p-2">₱@product.SRP.ToString("N2")</td>
                                <td class="p-2 text-right font-medium text-gray-800 amountCell">₱0.00</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Totals -->
            <div class="text-sm space-y-1 text-right mt-4">
                <p><span class="text-gray-500">Subtotal</span> <span id="invoiceSubtotal" class="font-medium">₱0.00</span></p>
                <p><span class="text-gray-500">Discount</span> <span class="font-medium">₱0.00</span></p>
                <p class="font-bold text-gray-800">TOTAL <span id="invoiceTotal">₱0.00</span></p>
            </div>

            <!-- Notes -->
            <h2 class="text-lg font-bold mt-6 mb-2">NOTES</h2>
            <textarea name="Notes"
                      id="Notes"
                      class="w-full border border-gray-300 rounded-xl p-2 text-sm h-20 resize-none"
                      placeholder="Enter notes..."></textarea>

            <!-- Status (hidden default) -->
            <input type="hidden" name="Status" value="Unpaid" />

            <!-- Buttons -->
            <div class="flex justify-between mt-6">
                <button type="button"
                        data-modal-close
                        class="bg-green-100 hover:bg-green-200 text-green-700 font-medium px-6 py-2 rounded-xl">
                    Cancel
                </button>
                <button type="submit"
                        class="bg-green-400 hover:bg-green-500 text-white font-medium px-6 py-2 rounded-xl shadow-md">
                    Save
                </button>
            </div>
        </form>
    </div>
</div>








<!--Update Modal-->
<!-- ===== Update Modal ===== -->
<div id="updateModal" class="fixed inset-0 bg-black bg-opacity-40 hidden items-center justify-center z-50">
    <div class="bg-white rounded-2xl shadow-lg w-[400px] p-6 relative">
        <button type="button" class="absolute top-3 right-4 text-gray-500 hover:text-gray-800 text-xl font-bold" onclick="closeModal('updateModal')">&times;</button>

        <h2 class="text-lg font-semibold mb-4">Update Invoice Status</h2>

        <form id="updateForm">
            <input type="hidden" id="updateInvoiceId" />
            <p class="text-sm text-gray-600 mb-3">Invoice: <span id="updateInvoiceNumber" class="font-medium"></span></p>

            <label for="updateStatus" class="text-sm font-medium text-gray-700">Select new status:</label>
            <select id="updateStatus" class="w-full border border-gray-300 rounded-xl p-2 mt-1 text-sm focus:ring-1 focus:ring-pink-400">
                <option value="Paid">Paid</option>
                <option value="Unpaid">Unpaid</option>
            </select>

            <div class="flex justify-end gap-3 mt-6">
                <button type="button" class="px-4 py-2 bg-gray-200 text-gray-700 rounded-xl" onclick="closeModal('updateModal')">Cancel</button>
                <button type="submit" class="px-4 py-2 bg-pink-500 hover:bg-pink-600 text-white rounded-xl">Update</button>
            </div>
        </form>
    </div>
</div>

<!--Delete Modal-->
<!-- ===== Delete Modal ===== -->
<div id="deleteModal" class="fixed inset-0 bg-black bg-opacity-40 hidden items-center justify-center z-50">
    <div class="bg-white rounded-2xl shadow-lg w-[400px] p-6 relative">
        <button type="button" class="absolute top-3 right-4 text-gray-500 hover:text-gray-800 text-xl font-bold" onclick="closeModal('deleteModal')">&times;</button>

        <h2 class="text-lg font-semibold mb-4 text-red-600">Delete Invoice</h2>
        <p class="text-sm text-gray-600 mb-2">To confirm deletion, type:</p>
        <p class="text-sm font-semibold mb-4 text-gray-800">delete_<span id="deleteInvoiceNumber"></span></p>

        <input type="hidden" id="deleteInvoiceId" />
        <input id="deleteConfirmInput" type="text" class="w-full border border-gray-300 rounded-xl p-2 text-sm mb-4 focus:ring-1 focus:ring-pink-400" placeholder="Type confirmation..." />

        <div class="flex justify-end gap-3">
            <button type="button" class="px-4 py-2 bg-gray-200 text-gray-700 rounded-xl" onclick="closeModal('deleteModal')">Cancel</button>
            <button id="confirmDeleteBtn" type="submit" disabled class="px-4 py-2 bg-red-400 text-white rounded-xl opacity-70 cursor-not-allowed">Delete</button>
        </div>
    </div>
</div>


<script>
    // Make all invoices available in JS
    const invoices = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Invoices));
</script>
    

<!-- ===== JS: Modal + Search ===== -->
<script>
    // Modal toggle
    document.querySelectorAll('[data-modal-target]').forEach(btn => {
        btn.addEventListener('click', () => {
            const target = document.getElementById(btn.dataset.modalTarget);
            target.classList.remove('hidden');
            target.classList.add('flex');
        });
    });
    document.querySelectorAll('[data-modal-close]').forEach(btn => {
        btn.addEventListener('click', () => {
            btn.closest('#newInvoiceModal').classList.add('hidden');
            btn.closest('#newInvoiceModal').classList.remove('flex');
        });
    });

    // === Search ===
    const searchBox = document.getElementById("searchBox");
    const suggestions = document.getElementById("searchSuggestions");
    const tableBody = document.querySelector("#invoiceTable tbody");
    const rows = Array.from(tableBody.querySelectorAll("tr"));

    searchBox.addEventListener("input", () => {
        const term = searchBox.value.trim().toLowerCase();
        suggestions.innerHTML = "";
        suggestions.classList.add("hidden");

        if (term.length < 2) {
            rows.forEach(r => (r.style.display = ""));
            return;
        }

        // Filter matching invoices
        const matches = rows.filter(row => {
            const inv = row.dataset.invoiceNumber;
            const cust = row.dataset.billedTo;
            const due = row.dataset.dueDate;
            const match = inv.includes(term) || cust.includes(term) || due.includes(term);
            row.style.display = match ? "" : "none";
            return match;
        });

        // Move matches to top
        matches.reverse().forEach(r => tableBody.prepend(r));

        // Suggestions dropdown
        if (matches.length > 0) {
            suggestions.innerHTML = matches.slice(0, 5).map(row => `
                <div class="p-3 hover:bg-pink-50 cursor-pointer transition border-b border-gray-100"
                     data-id="${row.dataset.id}">
                    <div class="text-gray-700 font-medium">${row.dataset.invoiceNumber.toUpperCase()}</div>
                    <div class="text-xs text-gray-500">
                        ${row.dataset.billedTo} • ${row.dataset.dueDate || "No Due Date"}
                    </div>
                </div>
            `).join("");
            suggestions.classList.remove("hidden");

            // Clicking suggestion → move row to top + click it
            suggestions.querySelectorAll("[data-id]").forEach(el => {
                el.addEventListener("click", () => {
                    const targetRow = rows.find(r => r.dataset.id === el.dataset.id);
                    if (targetRow) {
                        // Move row to top
                        tableBody.prepend(targetRow);

                        // Make sure it's visible
                        targetRow.scrollIntoView({ behavior: "smooth", block: "center" });

                        // Trigger the row’s click handler
                        setTimeout(() => selectInvoice(el.dataset.id), 300);
                    }

                    // Hide suggestions and clear search box
                    suggestions.classList.add("hidden");
                });
            });
        } else {
            suggestions.innerHTML = "<div class='p-2 text-sm text-gray-500'>No results found</div>";
            suggestions.classList.remove("hidden");
        }
    });

    // Hide suggestions when clicking outside
    document.addEventListener("click", (e) => {
        if (!e.target.closest("#searchSuggestions") && e.target !== searchBox) {
            suggestions.classList.add("hidden");
        }
    });
</script>



<!--

Product modal script
-->

<script>
    document.addEventListener("DOMContentLoaded", () => {
      const searchInput = document.getElementById("productSearchInput");
      const suggestions = document.getElementById("productSuggestions");
      const rows = Array.from(document.querySelectorAll("#productTableBody tr"));

      function showSuggestions(term) {
        suggestions.innerHTML = "";
        if (!term || term.length < 1) {
          suggestions.classList.add("hidden");
          return;
        }

        const matches = rows.filter(r =>
          r.textContent.toLowerCase().includes(term.toLowerCase())
        );

        if (matches.length === 0) {
          suggestions.innerHTML = `<div class='p-2 text-gray-500 text-sm'>No results</div>`;
          suggestions.classList.remove("hidden");
          return;
        }

        matches.slice(0, 8).forEach(row => {
          const el = document.createElement("div");
          el.className =
            "p-2 hover:bg-pink-50 cursor-pointer text-sm border-b border-gray-100";
          el.textContent = row.children[0].textContent; // product name
          el.addEventListener("click", () => scrollToRow(row));
          suggestions.appendChild(el);
        });

        suggestions.classList.remove("hidden");
      }

    function scrollToRow(row) {
      // container: the element that has overflow-y: auto (the scrolling box for products)
      const container = document.querySelector(".max-h-60.overflow-y-auto") || document.querySelector(".border.border-gray-200.rounded-xl.bg-white.max-h-60");
      if (!container) {
        // fallback: if container not found, use native scrollIntoView
        row.scrollIntoView({ behavior: "smooth", block: "center" });
        return;
      }

      // Get bounding rects
      const containerRect = container.getBoundingClientRect();
      const rowRect = row.getBoundingClientRect();

      // Current scroll position of container
      const currentScroll = container.scrollTop;

      // Distance from top of container to top of row in viewport coordinates
      const offsetTopInViewport = rowRect.top - containerRect.top;

      // Desired scrollTop so the row is vertically centered inside container
      const desiredScrollTop = currentScroll + offsetTopInViewport - (container.clientHeight / 2) + (rowRect.height / 2);

      // Clamp desiredScrollTop between 0 and maxScroll
      const maxScroll = container.scrollHeight - container.clientHeight;
      const finalScroll = Math.max(0, Math.min(desiredScrollTop, maxScroll));

      // Smoothly scroll the container
      container.scrollTo({ top: finalScroll, behavior: "smooth" });

      // optional visual flash (brief)
      row.classList.add("bg-pink-50");
      setTimeout(() => row.classList.remove("bg-pink-50"), 900);

      // hide suggestions and clear search input
      suggestions.classList.add("hidden");
      searchInput.value = "";
    }


      searchInput.addEventListener("input", e => showSuggestions(e.target.value));

      searchInput.addEventListener("keydown", e => {
        if (e.key === "Enter") {
          e.preventDefault();
          const first = suggestions.querySelector("div");
          if (first) first.click();
        }
      });

      document.addEventListener("click", e => {
        if (!e.target.closest("#productSuggestions") && e.target !== searchInput)
          suggestions.classList.add("hidden");
      });
    });
</script>


<!-- Right document view-->
<script>
    // === Dynamic invoice detail rendering (no page reload) ===

    function formatDate(dateStr) {
        if (!dateStr) return "—";
        const d = new Date(dateStr);
        return d.toLocaleDateString("en-US", { month: "short", day: "numeric", year: "numeric" });
    }

    function selectInvoice(id) {
        // Fix: use proper PascalCase to match .NET property names
        const invoice = invoices.find(i => i.Id === id);
        if (!invoice) {
            console.warn("Invoice not found for ID:", id);
            return;
        }
            // Highlight selected row
    // remove highlight to other rows
    document.querySelectorAll("#invoiceTable tbody tr").forEach(r => r.classList.remove("bg-pink-50"));
    const selectedRow = document.querySelector(`#invoiceTable tbody tr[data-id="${id}"]`);
    if (selectedRow) selectedRow.classList.add("bg-pink-50");

        const container = document.getElementById("invoiceDetailContainer");
        if (!container) return;

        // Render invoice detail HTML dynamically
        container.innerHTML = `
            <div class="bg-white rounded-2xl shadow-sm border border-gray-100 p-5 invoice-detail">
                <h2 class="text-lg font-semibold text-gray-700 mb-3">Invoice Detail</h2>

                <div class="border border-gray-200 rounded-xl p-4 text-sm">
                    <div class="flex justify-between mb-3">
                        <div>
                            <h3 class="text-xl font-semibold text-gray-800">Invoice</h3>
                            <p class="text-gray-500 text-sm">Invoice Number <span class="font-medium text-gray-700">${invoice.InvoiceNumber}</span></p>
                        </div>
                        <img src="/images/logo.png" alt="Logo" class="w-20 opacity-80">
                    </div>

                    <div class="flex justify-between text-xs text-gray-600 mb-3">
                        <div>
                            <p class="font-medium text-gray-700 mb-1">Billed by:</p>
                            <p>Sheessentials</p>
                        </div>
                        <div>
                            <p class="font-medium text-gray-700 mb-1">Billed to:</p>
                            <p>${invoice.BilledTo || "Unknown"}</p>
                        </div>
                    </div>

                    <div class="flex justify-between text-xs mb-3">
                        <p><span class="font-medium text-gray-700">Date Issued:</span> ${formatDate(invoice.IssuedAt)}</p>
                        <p><span class="font-medium text-gray-700">Due Date:</span> ${formatDate(invoice.DueDate)}</p>
                    </div>

                    <table class="w-full text-xs border-t border-b border-gray-200 mb-3">
                        <thead>
                            <tr class="text-gray-600 text-left">
                                <th class="py-2">Product</th>
                                <th class="py-2">Qty</th>
                                <th class="py-2">Price</th>
                                <th class="py-2 text-right">Total</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${(invoice.Items || []).map(item => `
                                <tr>
                                    <td class="py-1">${item.ProductId}</td>
                                    <td>${item.Quantity}</td>
                                    <td>₱${Number(item.SalePrice).toFixed(2)}</td>
                                    <td class="text-right">₱${(item.Quantity * item.SalePrice).toFixed(2)}</td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>

                    <div class="text-right space-y-1 text-gray-700">
                        <p>Subtotal: <span class="font-semibold">₱${Number(invoice.Subtotal).toFixed(2)}</span></p>
                        <p>Tax: <span class="font-semibold">₱${Number(invoice.Tax).toFixed(2)}</span></p>
                        <p>Discount: <span class="font-semibold">₱${Number(invoice.Discount).toFixed(2)}</span></p>
                        <hr />
                        <p class="text-lg font-semibold">Total: ₱${Number(invoice.Total).toFixed(2)}</p>
                    </div>
                </div>
            </div>
        `;

        // Smooth scroll into view of the right panel
        container.scrollIntoView({ behavior: "smooth", block: "nearest" });
    }
</script>


<script>
    document.addEventListener("DOMContentLoaded", () => {

      function openUpdateModal(id, number, status) {
        const modal = document.getElementById('updateModal');
        modal.classList.remove('hidden');
        modal.classList.add('flex');
        document.getElementById('updateInvoiceId').value = id;
        document.getElementById('updateInvoiceNumber').textContent = number;
        document.getElementById('updateStatus').value = status;
      }

      function openDeleteModal(id, number) {
        const modal = document.getElementById('deleteModal');
        modal.classList.remove('hidden');
        modal.classList.add('flex');
        // Invoice Id to display

        document.getElementById('deleteInvoiceId').value = id;

       // delete string confirmation
        document.getElementById('deleteInvoiceNumber').textContent = number;

        // set up
        const input = document.getElementById('deleteConfirmInput');
        const button = document.getElementById('confirmDeleteBtn');
        input.value = '';
        button.disabled = true;
        button.classList.add('opacity-70', 'cursor-not-allowed');


        // enables if the input matches the delete confirmation string it eneables the button
        input.oninput = () => {
          const expected = `delete_${number}`;
          if (input.value.trim() === expected) {
            button.disabled = false;
            button.classList.remove('opacity-70', 'cursor-not-allowed');
            button.classList.replace('bg-red-400', 'bg-red-500');
          } else {
            button.disabled = true;
            button.classList.add('opacity-70', 'cursor-not-allowed');
            button.classList.replace('bg-red-500', 'bg-red-400');
          }
        };


      }

      function closeModal(id) {
        const modal = document.getElementById(id);
        modal.classList.add('hidden');
        modal.classList.remove('flex');
      }

      document.getElementById('updateForm').addEventListener('submit', (e) => {
        e.preventDefault();
        const id = document.getElementById('updateInvoiceId').value;
        const newStatus = document.getElementById('updateStatus').value;
        console.log(`Update invoice ${id} → ${newStatus}`);
        closeModal('updateModal');
      });



      // function for Deleteing  the invoice 
    // document.getElementById('confirmDeleteBtn').addEventListener('click', async () => {
    //   const id = document.getElementById('deleteInvoiceId').value;

    //   try {
    //     const response = await fetch(`/Sales_Finance/DeleteInvoice`, {
    //       method: 'POST',
    //       headers: { 'Content-Type': 'application/json' },
    //       body: JSON.stringify({ id })
    //     });

    //     const result = await response.json();

    //     if (result.success) {
    //       console.log(`Invoice ${id} deleted`);
    //       closeModal('deleteModal');
    //       Optionally remove the deleted row without reloading:
    //       document.querySelector(`[data-id='${id}']`)?.remove();
    //     } else {
    //       alert("Failed to delete invoice.");
    //     }

    //   } catch (err) {
    //     console.error("Error deleting invoice:", err);
    //     alert("An error occurred while deleting the invoice.");
    //   }
    // });

        document.getElementById('confirmDeleteBtn').addEventListener('click', async () => {
        const id = document.getElementById('deleteInvoiceId').value;

    const response = await fetch(`/Sales_Finance/DeleteInvoice?id=${encodeURIComponent(id)}`, {
        method: 'POST'
    });


        const result = await response.json();
        if (result.success) {
            closeModal('deleteModal');
            // Optionally remove the row without reloading:
            document.querySelector(`[data-id="${id}"]`)?.remove();
        } else {
            alert(result.message || 'Failed to delete invoice');
        }
    });



      // make them global (so buttons in HTML can call them)
      window.openUpdateModal = openUpdateModal;
      window.openDeleteModal = openDeleteModal;
      window.closeModal = closeModal;

    });
</script>

<!--Invoice Modal Seacrh customer script-->
<script>
    document.addEventListener("DOMContentLoaded", () => {
        const customers = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Customers));
        const searchInput = document.getElementById("customerSearchInput");
        const suggestions = document.getElementById("customerSuggestions");
        const detailsArea = document.getElementById("customerDetails");
        const hiddenCustomerId = document.getElementById("selectedCustomerId");

        searchInput.addEventListener("input", () => {
            const query = searchInput.value.toLowerCase().trim();
            suggestions.innerHTML = "";
            // alert("Script loaded and working. Query: " + query);

            if (!query) {
                suggestions.classList.add("hidden");
                return;
            }

            const matches = customers.filter(c =>
                c.FirstName.toLowerCase().includes(query) ||
                c.LastName.toLowerCase().includes(query) ||
                (c.Email && c.Email.toLowerCase().includes(query))
            );

            if (!matches.length) {
                suggestions.classList.add("hidden");
                return;
            }

            matches.forEach(c => {
                const div = document.createElement("div");
                div.className = "px-4 py-2 hover:bg-pink-50 cursor-pointer text-sm";
                div.textContent = `${c.FirstName} ${c.LastName}${c.Email ? ' (' + c.Email + ')' : ''}`;
                div.addEventListener("click", () => selectCustomer(c));
                suggestions.appendChild(div);
            });

            suggestions.classList.remove("hidden");
        });

        function selectCustomer(c) {
            searchInput.value = `${c.FirstName} ${c.LastName}`;
            hiddenCustomerId.value = c.Id;
            suggestions.classList.add("hidden");

            detailsArea.value =
                `Name: ${c.FirstName} ${c.LastName}\n` +
                (c.Email ? `Email: ${c.Email}\n` : "") +
                (c.Phone ? `Phone: ${c.Phone}\n` : "") +
                (c.Address
                    ? `Address: ${c.Address.Street ?? ""}, ${c.Address.City ?? ""}`
                    : "");
            detailsArea.focus();
        }

        document.addEventListener("click", (e) => {
            if (!suggestions.contains(e.target) && e.target !== searchInput) {
                suggestions.classList.add("hidden");
            }
        });
    });
</script>



@* <script> *@
@*     document.addEventListener("DOMContentLoaded", () => { *@
@*         // --- Auto-generate invoice number --- *@
@*         const invoiceLabel = document.getElementById("autoInvoiceNumber"); *@

@*         // You can get last invoice number from server if available, else start at 1 *@
@*         let nextInvoiceNumber = @Model.Invoices.Count + 1; // simple example *@
@*         const invoiceNumberFormatted = String(nextInvoiceNumber).padStart(5, "0"); *@
@*         invoiceLabel.textContent = `INV-${invoiceNumberFormatted}`; *@

@*         // --- Calculate subtotal automatically --- *@
@*         const qtyInputs = document.querySelectorAll(".qtyInput"); *@
@*         const subtotalLabel = document.getElementById("invoiceSubtotal"); *@
@*         const totalLabel = document.getElementById("invoiceTotal"); *@

@*         qtyInputs.forEach(input => { *@
@*             input.addEventListener("input", updateTotals); *@
@*         }); *@

@*         function updateTotals() { *@
@*             let subtotal = 0; *@
@*             document.querySelectorAll(".qtyInput").forEach(input => { *@
@*                 const qty = parseFloat(input.value) || 0; *@
@*                 const price = parseFloat(input.dataset.price) || 0; *@
@*                 const amount = qty * price; *@

@*                 const amountCell = input.closest("tr").querySelector(".amountCell"); *@
@*                 amountCell.textContent = `₱${amount.toLocaleString(undefined, { minimumFractionDigits: 2 })}`; *@

@*                 subtotal += amount; *@
@*             }); *@

@*             subtotalLabel.textContent = `₱${subtotal.toLocaleString(undefined, { minimumFractionDigits: 2 })}`; *@
@*             totalLabel.textContent = subtotalLabel.textContent; // for now, total = subtotal *@
@*         } *@
@*     }); *@
@* </script> *@

<!--Auto -->

<script>
    document.addEventListener("DOMContentLoaded", async () => {
        // Get next invoice number from server
        const resp = await fetch("/Invoices/GetNextInvoiceNumber");
        const data = await resp.json();
        document.getElementById("autoInvoiceNumber").textContent = data.invoiceNumber;
        document.getElementById("InvoiceNumber").value = data.invoiceNumber;
    });

    // Auto-update totals
    document.addEventListener("input", e => {
        if (e.target.classList.contains("qtyInput")) {
            const row = e.target.closest("tr");
            const price = parseFloat(e.target.dataset.price);
            const qty = parseFloat(e.target.value) || 0;
            const amount = price * qty;
            row.querySelector(".amountCell").textContent = `₱${amount.toFixed(2)}`;

            let subtotal = 0;
            document.querySelectorAll(".qtyInput").forEach(input => {
                const p = parseFloat(input.dataset.price);
                const q = parseFloat(input.value) || 0;
                subtotal += p * q;
            });

            document.getElementById("invoiceSubtotal").textContent = `₱${subtotal.toFixed(2)}`;
            document.getElementById("invoiceTotal").textContent = `₱${subtotal.toFixed(2)}`;
        }
    });
</script>


