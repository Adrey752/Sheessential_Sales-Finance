@{
    ViewData["Title"] = "Dashboard Overview";
}

<!-- Tailwind CDN -->
<script src="https://cdn.tailwindcss.com"></script>

<!-- Chart.js CDN -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>



    <!-- Metric Cards -->
    <div class="grid grid-cols-3 gap-6 mb-8">
    <div class="bg-white p-5 rounded-2xl shadow-sm border border-gray-100">
        <p class="text-gray-500 text-sm mb-1">Revenue</p>
        <h2 class="text-2xl font-semibold text-emerald-700">
            ₱@ViewBag.Revenue.ToString("N2")
        </h2>
    </div>

    <div class="bg-white p-5 rounded-2xl shadow-sm border border-gray-100">
        <p class="text-gray-500 text-sm mb-1">Expense</p>
        <h2 class="text-2xl font-semibold text-rose-600">
            ₱@ViewBag.Expense.ToString("N2")
        </h2>
    </div>

    <div class="bg-white p-5 rounded-2xl shadow-sm border border-gray-100">
        <p class="text-gray-500 text-sm mb-1">Sales</p>
        <h2 class="text-2xl font-semibold text-lime-600">
            @ViewBag.Sales
        </h2>
    </div>
</div>


    <div class="grid grid-cols-3 gap-6">
    <!-- Left: Cash Flow -->
    <div class="col-span-2 bg-white p-6 rounded-2xl shadow-sm border border-gray-100">
        <h2 class="text-lg font-semibold text-gray-800 mb-4">Cash Flow</h2>
        <canvas id="cashFlowChart" height="100"></canvas>
    </div>

    <!-- Right: Sales Report -->
    <div class="bg-white p-6 rounded-2xl shadow-sm border border-gray-100">
        <h2 class="text-lg font-semibold text-gray-800 mb-4">Sales Report</h2>
        <canvas id="salesReportChart" height="150"></canvas>

        <div class="mt-6">
            <h3 class="text-sm font-semibold text-gray-700 mb-2">Latest Customers</h3>
            <ul class="space-y-2 text-sm">
                @foreach (var customer in (IEnumerable<Sheessential_Sales_Finance.Models.User>)ViewBag.LatestCustomers)
                {
                    <li class="flex items-center space-x-2">
                        <span class="w-2 h-2 bg-emerald-400 rounded-full"></span>
                        <span>@customer.FirstName @customer.LastName</span>
                    </li>
                }
            </ul>
        </div>
    </div>
</div>


    <!-- Account Balance Table -->
    <div class="bg-white mt-8 p-6 rounded-2xl shadow-sm border border-gray-100">
        <h2 class="text-lg font-semibold text-gray-800 mb-4">Account Balance</h2>
        <table class="w-full text-sm text-left text-gray-600">
            <thead class="text-xs text-gray-500 uppercase border-b">
                <tr>
                    <th class="py-3 px-4">Tracking ID</th>
                    <th class="py-3 px-4">Product</th>
                    <th class="py-3 px-4">Price</th>
                    <th class="py-3 px-4">In Stock</th>
                    <th class="py-3 px-4">Total Order</th>
                    <th class="py-3 px-4">Status</th>
                    <th class="py-3 px-4">Options</th>
                </tr>
            </thead>
            <tbody>
                <tr class="border-b hover:bg-gray-50">
                    <td class="py-3 px-4">#0032</td>
                    <td class="py-3 px-4 font-medium text-gray-800">Home Automation</td>
                    <td class="py-3 px-4">₱84</td>
                    <td class="py-3 px-4">720</td>
                    <td class="py-3 px-4">720</td>
                    <td class="py-3 px-4"><span class="px-3 py-1 text-xs font-medium text-green-700 bg-green-100 rounded-full">Active</span></td>
                    <td class="py-3 px-4 text-blue-500 cursor-pointer">Details</td>
                </tr>
                <!-- Repeat rows as needed -->
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
  <script>
async function loadCashFlowChart() {
    const res = await fetch('/Sales_Finance/GetMonthlySalesData');
    const data = await res.json();

    const labels = data.map(x => x.month);
    const revenue = data.map(x => x.totalRevenue);
    const expense = data.map(x => x.totalExpense);

    const ctx1 = document.getElementById('cashFlowChart').getContext('2d');
    new Chart(ctx1, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [
                {
                    label: 'Revenue',
                    data: revenue,
                    backgroundColor: 'rgba(236, 72, 153, 0.6)',
                    borderRadius: 6
                },
                {
                    label: 'Expense',
                    data: expense.map(x => -x),
                    backgroundColor: 'rgba(37, 99, 235, 0.6)',
                    borderRadius: 6
                }
            ]
        },
        options: {
            responsive: true,
            plugins: { legend: { position: 'bottom' } },
            scales: {
                y: { beginAtZero: true, grid: { drawBorder: false } },
                x: { grid: { display: false } }
            }
        }
    });
}

loadCashFlowChart();

         // Donut Chart - Sales Report
                const ctx2 = document.getElementById('salesReportChart').getContext('2d');
                new Chart(ctx2, {
                    type: 'doughnut',
                    data: {
                        labels: ['Sales', 'Distribution', 'Return'],
                        datasets: [{
                            data: [45, 28, 18],
                            backgroundColor: ['#3b82f6', '#fb923c', '#f43f5e'],
                            hoverOffset: 10
                        }]
                    },
                    options: {
                        cutout: '70%',
                        plugins: {
                            legend: {
                                position: 'bottom',
                                labels: { boxWidth: 12 }
                            }
                        }
                    }
                });
</script>
}
