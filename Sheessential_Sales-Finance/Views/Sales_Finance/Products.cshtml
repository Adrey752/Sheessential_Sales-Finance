@model IEnumerable<Product>
@{
    ViewData["Title"] = "Products Overview";
}

<!-- ===== PAGE CONTAINER ===== -->
<div class="p-6 bg-gray-50 min-h-screen space-y-8">

    <!-- ===== TOP SECTION ===== -->
    <div class="flex flex-wrap gap-6 justify-between">

        <!-- ==== TOP PRODUCT CARD ==== -->
        <div class="bg-white rounded-2xl shadow-sm p-5 w-[320px]">
            <h6 class="text-center font-semibold text-gray-700 mb-3 uppercase">Top Product</h6>
            <img src="~/images/Hand_Sanitizer.jpg" alt="Top Product" class="rounded-xl mb-4 mx-auto w-full h-48 object-cover">
            @if (ViewBag.TopProduct != null)
            {
                <p class="text-center font-medium text-gray-800">@ViewBag.TopProduct.Item</p>
                <p class="text-center text-gray-400 text-sm mt-1">Total Sold</p>
                <p class="text-center font-bold text-lg text-gray-800 mt-1">@ViewBag.TopProduct.TotalQuantity</p>
            }
            else
            {
                <p class="text-center text-gray-400">No data available</p>
            }
        </div>

        <!-- ==== PRODUCT SALES CHART ==== -->
        <div class="flex-1 bg-white rounded-2xl shadow-sm p-6">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-lg font-semibold text-gray-700">Product Sales Trend</h2> <span id="chartProductName"></span>
                <select id="salesPeriod" class="border border-gray-300 rounded-lg text-sm px-3 py-1 focus:ring-2 focus:ring-pink-400">
                    <option value="week">This Week</option>
                    <option value="month">This Month</option>
                    <option value="year">This Year</option>
                </select>
            </div>
            <canvas id="productSalesChart" height="120"></canvas>
        </div>
    </div>

    <!-- ===== PRODUCT TABLE ===== -->
    <div class="bg-white rounded-2xl shadow-sm p-6">
        <h2 class="text-xl font-semibold text-gray-800 mb-4">Products Overview</h2>
        <div class="overflow-x-auto">
            <table class="min-w-full text-sm text-gray-700">
                <thead class="bg-gray-100 text-gray-600 uppercase text-xs tracking-wider">
                    <tr>
                        <th class="px-4 py-3 text-left">Product ID</th>
                        <th class="px-4 py-3 text-left">Product Name</th>
                        <th class="px-4 py-3 text-left">Category</th>
                        <th class="px-4 py-3 text-left">Selling Price</th>
                        <th class="px-4 py-3 text-left">Purchase Price</th>
                        <th class="px-4 py-3 text-left">Stock</th>
                        <th class="px-4 py-3 text-left">Status</th>
                        <th class="px-4 py-3 text-left">Options</th>
                    </tr>
                </thead>
                <tbody class="divide-y divide-gray-100">
                    @foreach (var p in Model)
                    {
                        <tr class="hover:bg-pink-50 transition cursor-pointer"
                            onclick="selectProduct('@p.Item', '@p.Id' )">
                            <td class="px-4 py-3 font-medium text-gray-800">@p.Id</td>
                            <td class="px-4 py-3">@p.Item</td>
                            <td class="px-4 py-3">
                                <span class="bg-yellow-400/90 text-white text-xs font-semibold px-3 py-1 rounded-lg">@p.Category</span>
                            </td>
                            <td class="px-4 py-3">₱@p.UnitPrice</td>
                            <td class="px-4 py-3">₱@p.UnitPrice</td>
                            <td class="px-4 py-3">@p.StockQuantity</td>
                            <td class="px-4 py-3">
                                @if (p.StockQuantity >= 10)
                                {
                                    <span class="text-sky-500 font-semibold uppercase text-xs">Available</span>
                                }
                                else if (p.StockQuantity < 10 && p.StockQuantity > 0)
                                {
                                    <span class="text-gray-400 font-semibold uppercase text-xs">Low</span>
                                }
                                else
                                {
                                    <span class="text-red-400 font-semibold uppercase text-xs">Sold</span>
                                }
                            </td>
                            <td class="px-4 py-3">
                                <button onclick="openModal('@p.Item', '@p.Category', '@p.UnitPrice', '@p.UnitPrice')"
                                        class="text-blue-500 hover:underline text-sm font-medium">
                                    Details
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <!-- Pagination -->
            <div class="flex justify-center mt-6 space-x-2">
                @if (ViewBag.CurrentPage > 1)
                {
                    <a href="@Url.Action("Products", new { page = ViewBag.CurrentPage - 1 })"
                       class="px-4 py-2 bg-gray-200 rounded-lg text-gray-700 hover:bg-gray-300">
                        Previous
                    </a>
                }

                @for (int i = 1; i <= ViewBag.TotalPages; i++)
                {
                    if (i == ViewBag.CurrentPage)
                    {
                        <span class="px-4 py-2 bg-sky-500 text-white rounded-lg">@i</span>
                    }
                    else
                    {
                        <a href="@Url.Action("Products", new { page = i })"
                           class="px-4 py-2 bg-gray-200 rounded-lg text-gray-700 hover:bg-gray-300">
                            @i
                        </a>
                    }
                }

                @if (ViewBag.CurrentPage < ViewBag.TotalPages)
                {
                    <a href="@Url.Action("Products", new { page = ViewBag.CurrentPage + 1 })"
                       class="px-4 py-2 bg-gray-200 rounded-lg text-gray-700 hover:bg-gray-300">
                        Next
                    </a>
                }
            </div>
        </div>
    </div>
</div>

<!-- ===== PRODUCT MODAL (unchanged) ===== -->
<div id="productModal" class="hidden fixed inset-0 bg-black/50 flex items-center justify-center z-50">
    <div class="bg-white rounded-3xl shadow-xl w-[700px] p-8 relative flex gap-6">
        <button onclick="closeModal()" class="absolute top-4 right-4 text-gray-400 hover:text-gray-600 text-2xl">&times;</button>
        <div class="flex-1">
            <h2 id="modalName" class="text-2xl font-bold text-gray-800 mb-2">Product Name</h2>
            <span id="modalCategory" class="bg-yellow-400 text-white text-sm font-semibold px-3 py-1 rounded-lg inline-block mb-3">Category</span>
            <p class="text-gray-600 text-sm leading-relaxed mb-4">
                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam sollicitudin ipsum arcu.
            </p>
            <div class="mt-4">
                <p class="text-gray-700 font-medium">Profit Margin <span class="text-xs text-gray-400 block">(auto-computed)</span></p>
                <p class="mt-3 font-semibold text-gray-800">
                    ₱<span id="modalSelling">0</span>
                    <span class="block text-sm text-gray-500 font-medium">₱<span id="modalPurchase">0</span> Purchase Price</span>
                </p>
            </div>
        </div>
        <div class="w-60">
            <img src="~/images/topproduct.jpg" alt="Product Image" class="rounded-xl shadow-sm w-full object-cover">
        </div>
    </div>
    <!-- ✅ Toast Notification Container (Top Right) -->
    <div id="toastContainer" class="fixed top-5 right-5 space-y-2 z-50"></div>

</div>

<!-- ===== CHART.JS CDN + STATIC CHART SCRIPT ===== -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    const ctx = document.getElementById('productSalesChart');
    let selectedProductId = null;
    let selectedPeriod = 'week';

    const productChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: [],
            datasets: [{
                label: 'Sales (Units)',
                data: [],
                borderColor: '#ec4899',
                backgroundColor: 'rgba(236,72,153,0.2)',
                borderWidth: 2,
                fill: true,
                tension: 0.3,
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: { beginAtZero: true }
            }
        }
    });

    // Handle product selection from table
    function selectProduct(itemName, productId) {
        selectedProductId = productId;
        loadProductSales(selectedPeriod);
        var displayName = document.getElementById("chartProductName");
        displayName.textContent = itemName;
        
    }

    // Handle dropdown period change
    document.getElementById("salesPeriod").addEventListener("change", (e) => {
        selectedPeriod = e.target.value;
        if (selectedProductId) {
            loadProductSales(selectedPeriod);
        }
    });

    async function loadProductSales(period) {
        try {
            const response = await fetch(`/Sales_Finance/GetProductSales?productId=${selectedProductId}&period=${period}`);
            const data = await response.json();

            // Check if response is valid and is an array
            if (!Array.isArray(data)) {
                console.warn("No valid data received:", data);
                showToast(data.message || "No sales data found.", "warning");

                // Clear chart if no data
                productChart.data.labels = [];
                productChart.data.datasets[0].data = [];
                productChart.update();
                return;
            }

            // Clear old chart data before adding new
            productChart.data.labels = [];
            productChart.data.datasets[0].data = [];

            // Add new data
            productChart.data.labels = data.map(d => d.label || d.Label);
            productChart.data.datasets[0].data = data.map(d => d.total || d.Total);

            // Refresh the chart
            productChart.update();
            showToast("Sales data loaded successfully ✅", "success");

        } catch (error) {
            console.error("Error loading sales:", error);

            showToast("Something went wrong 😭", "error");

            productChart.data.labels = [];
            productChart.data.datasets[0].data = [];
            productChart.update();
        }
    }

    function showToast(message, type = "info") {
        const toast = document.createElement("div");

        const bgColor = {
            success: "bg-green-500",
            error: "bg-red-500",
            warning: "bg-yellow-500",
            info: "bg-blue-500"
        }[type];

        toast.className = `${bgColor} text-white px-4 py-3 rounded-lg shadow-lg animate-slideIn`;
        toast.innerText = message;

        document.getElementById("toastContainer").appendChild(toast);

        // Remove after animation
        setTimeout(() => {
            toast.classList.add("animate-fadeOut");
            setTimeout(() => toast.remove(), 500);
        }, 3000);
    }

</script>

